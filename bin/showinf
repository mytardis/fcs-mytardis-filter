#!/usr/bin/python
"""
Usage: showinf in_file.fcs
Author: James Wettenhall <james.wettenhall@monash.edu>
"""
import sys
import array
from rpy2.robjects.packages import importr
from rpy2.robjects import StrVector
# from rpy2.robjects.methods import RS4, RS4Auto_Type
import rpy2.robjects as robjects
import re

if len(sys.argv) < 2:
    print "Usage: showinf in_file.fcs"
    sys.exit(1)

base = importr('base')
flowCore = importr('flowCore')

getmethod = robjects.baseenv.get("getMethod")

descriptionMethod = \
    getmethod("description",
              signature=StrVector(["flowFrame", ]),
              where="package:flowCore")

exprsMethod = \
    getmethod("exprs",
              signature=StrVector(["flowFrame", ]),
              where="package:flowCore")

flowSet = flowCore.read_flowSet(files=sys.argv[1])
frameName = base.ls(envir=flowSet.do_slot("frames"))
flowFrame = base.get(frameName, envir=flowSet.do_slot("frames"))

print ""

parametersAndStains = \
    [{"$P0N": "Parameter<br>($PnN)", "$P0S": "Stain<br>($PnS)", "$P0R": "Range<br>($PnR)",
      "$P0B": "Bits<br>($PnB)", "$P0E": "Decades<br>($PnE)", "$P0G": "Gain<br>($PnG)",
      "$P0V": "Voltage<br>($PnV)", "P0CHANNELTYPE": "Channel<br>Type"}]

# description = descriptionMethod(flowFrame, hideInternal=True)
description = descriptionMethod(flowFrame)

channels = base.colnames(exprsMethod(flowFrame))
for channel in channels:
	parametersAndStains.append({})

filename = None
date = None
beginTime = None
system = None
cytometer = None
application = None
total = None
for i in range(0, len(description)):
    if description.names[i] == "$FIL":
        filename = description[i][0]
    elif description.names[i]=="$DATE":
        date = description[i][0]
    elif description.names[i]=="$BTIM":
        beginTime = description[i][0]
    elif description.names[i] == "$SYS":
        system = description[i][0]
    elif description.names[i] == "$CYT":
        cytometer = description[i][0]
    elif description.names[i] == "APPLICATION":
        application = description[i][0]
    elif description.names[i] == "$TOT":
        total = description[i][0]
    for j in range(1, len(channels) + 1):
        if re.match("\\$P%d[NSRBEGV]" % j, description.names[i]) or \
                re.match("P%dCHANNELTYPE" % j, description.names[i]):
            parametersAndStains[j][description.names[i]] = description[i][0]

if filename is not None:
    print "File: %s" % filename
if date is not None:
    print "Date: %s" % date
if beginTime is not None:
    print "Time: %s" % beginTime
if system is not None:
    print "System: %s" % system
if cytometer is not None:
    print "Cytometer: %s" % cytometer
if application is not None:
    print "Application: %s" % application
if total is not None:
    print "# Cells: %s" % total

print ""

# print str(parametersAndStains)
# print ""

parametersAndStainsKeys = ['$P0N', '$P0S', '$P0R', '$P0B', '$P0E', '$P0G', '$P0V', 'P0CHANNELTYPE']
parametersAndStainsTable = "<table>\n"
parametersAndStainsTable += "<tr>"
for key in parametersAndStainsKeys:
    parametersAndStainsTable += "<th>" + parametersAndStains[0][key] + "</th>"
parametersAndStainsTable += "</tr>\n"
for i in range(1, len(channels) + 1):
    parametersAndStainsTable += "<tr>"
    for key in parametersAndStainsKeys:
        key = key.replace('0', str(i))
        if key not in parametersAndStains[i]:
            parametersAndStainsTable += "<td>&nbsp;</td>"
        elif parametersAndStains[i][key].strip() == "":
            parametersAndStainsTable += "<td>&nbsp;</td>"
	else:
            parametersAndStainsTable += "<td>" + parametersAndStains[i][key] + "</td>"
    parametersAndStainsTable += "</tr>\n"
parametersAndStainsTable += "</table>\n"

print parametersAndStainsTable
